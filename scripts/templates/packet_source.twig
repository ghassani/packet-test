/**
*
* (c) Gassan Idriss <ghassani@gmail.com>
* 
* This file is part of libopenpst.
* 
* libopenpst is free software: you can redistribute it and/or modify
* it under the terms of the GNU General Public License as published by
* the Free Software Foundation, either version 3 of the License, or
* (at your option) any later version.
* 
* libopenpst is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
* GNU General Public License for more details.
* 
* You should have received a copy of the GNU General Public License
* along with libopenpst. If not, see <http://www.gnu.org/licenses/>.
*
* @file {{file_name}}.cpp
* @package openpst/libopenpst
* @brief {{description}}
*
* @author Gassan Idriss <ghassani@gmail.com>
*/

#include "{{path}}/{{file_name}}.h"

using namespace OpenPST::{{namespace}};

{{class_name}}::{{class_name}}(PacketEndianess targetEndian) : {{extends_class_name}}(targetEndian)
{
{% for field in fields %}
{% if '[]' in field.type %}
	addField("{{field.name}}", kPacketFieldTypeArray, {%if field.size_const %}{{field.size_const}}{%else%}{{field.size}}{%endif%});
{% elseif field.type == 'variable' %}
	addField("{{field.name}}", kPacketFieldTypeVariant, {{field.size}});
{% else %}
	addField("{{field.name}}", kPacketFieldTypePrimitive, sizeof({{field.type}}));
{% endif %}
{% endfor %}

{% for field,val in default_exends %}
{% if field and val %}
	set{{field|to_camel}}({{val}});
{% endif %}
{% endfor %}
{% for field in fields %}
{% if field.default %}
	set{{field.name_camel}}({{field.default}});
{% elseif field.default_string %}
	set{{field.name_camel}}("{{field.default_string}}");
{% endif %}
{% endfor %}
}

{{class_name}}::~{{class_name}}()
{

}

{% for field in fields %}
{% include 'method_get.twig' %}
                
{% include 'method_set.twig' %}
{% endfor %}

{% if expects_response %}
void {{class_name}}::prepareResponse()
{
	if (response == nullptr) {
		{{expects_response}}* resp = new {{expects_response}}();
		response = resp;
	}
}
{% endif %}

{% if unpacked_custom %}
{{unpacked_custom|raw}}
{% else %}
void {{class_name}}::unpack(std::vector<uint8_t>& data, TransportInterface* transport)
{
{% if unpack_base %}
	{{extends_class_name}}::unpack(data, transport);
{% endif %}
{% for field in fields %}
{% if field.type == 'variable' %}
	//variable
{% elseif field.type == 'uint8_t[]' %}
	//uint8_t[]
{% elseif field.type == 'int8_t[]' %}
	//int8_t[]
{% else %}
	set{{field.name_camel}}(read<{{field.type}}>(data, getFieldOffset("{{field.name}}")));
{% endif %}
{% endfor %}
}
{% endif %}