{% if '[]' in field.type %}
{% if field.allowed_setters %}
{% for setter in field.allowed_setters %}
{% if setter == 'file' %}
void {{class_name}}::set{{field.name_camel}}(std::ifstream& file, size_t size);
{
    write("{{field.name}}", file, size);
}
{% elseif setter == 'raw' %}
void {{class_name}}::set{{field.name_camel}}(uint8_t* data, size_t size);
{
    write("{{field.name}}", data, size);
}
{% elseif setter == 'string' %}
void {{class_name}}::set{{field.name_camel}}(const std::string& {{field.name_lower_camel}});
{
    write("{{field.name}}", {{field.name_lower_camel}});
}
{% endif %}
{% endfor %}
{% else %}
void {{class_name}}::set{{field.name_camel}}(uint8_t* data, size_t size);
{
    write("{{field.name}}", data, size);
}
{% endif %}
{% elseif field.type == 'variable' %}
{% if field.allowed_setters %}
{% for setter in field.allowed_setters %}
{% if setter == 'file' %}
void {{class_name}}::set{{field.name_camel}}(std::ifstream& file, size_t size);
{
    write("{{field.name}}", file, size);
}
{% elseif setter == 'raw' %}
void {{class_name}}::set{{field.name_camel}}(uint8_t* data, size_t size);
{
    write("{{field.name}}", data, size);
}
{% elseif setter == 'string' %}
void {{class_name}}::set{{field.name_camel}}(const std::string& {{field.name_lower_camel}});
{
    write("{{field.name}}", {{field.name_lower_camel}});
}
{% endif %}
{% endfor %}
{% else %}
void {{class_name}}::set{{field.name_camel}}(uint8_t* data, size_t size);
{
    write("{{field.name}}", data, size);
}
{% endif %}
{% else %}
void {{class_name}}::set{{field.name_camel}}({{field.type}} {{field.name_lower_camel}})
{
    write<{{field.type}}>("{{field.name}}", {{field.name_lower_camel}});
}
{% endif %}
