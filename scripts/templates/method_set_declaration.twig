{% if '[]' in field_type %}
{% if field_allowed_setters %}
{% for setter in field_allowed_setters %}
{% if setter == 'file' %}
                /**
                * @brief Set {{field_name}}
                * @param std::ifstream& file
                * @param size_t size
                * @return void
                */
                void set{{field_name_camel}}(std::ifstream& file, size_t size);
{% elseif setter == 'raw' %}
                /**
                * @brief Set {{field_name}}
                * @param uint8_t* {{field_name_lower_camel}}
                * @param size_t size
                * @return void
                */
                void set{{field_name_camel}}(uint8_t* data, size_t size);
{% elseif setter == 'string' %}
                /**
                * @brief Set {{field_name}}
                * @param const std::string& {{field_name_lower_camel}}
                * @return void
                */
                void set{{field_name_camel}}(const std::string& {{field_name_lower_camel}});
{% endif %}
{% endfor %}
{% else %}
                /**
                * @brief Set {{field_name}}
                * @param uint8_t* {{field_name_lower_camel}}
                * @param size_t size
                * @return void
                */
                void set{{field_name_camel}}(uint8_t* data, size_t size);
{% endif %}
{% elseif field_type == 'variable' %}
{% if field_allowed_setters %}
{% for setter in field_allowed_setters %}
{% if setter == 'file' %}
                /**
                * @brief Set {{field_name}}
                * @param std::ifstream& file
                * @param size_t size
                * @return void
                */
                void set{{field_name_camel}}(std::ifstream& file, size_t size);
{% elseif setter == 'raw' %}
                /**
                * @brief Set {{field_name}}
                * @param uint8_t* {{field_name_lower_camel}}
                * @param size_t {{field_name_lower_camel}}
                * @return void
                */
                void set{{field_name_camel}}(uint8_t* data, size_t size);
{% elseif setter == 'string' %}
                /**
                * @brief Set {{field_name}}
                * @param const std::string& {{field_name_lower_camel}}
                * @return void
                */
                void set{{field_name_camel}}(const std::string& {{field_name_lower_camel}});
{% endif %}
{% endfor %}
{% else %}
                /**
                * @brief Set {{field_name}}
                * @param uint8_t* {{field_name_lower_camel}}
                * @param size_t {{field_name_lower_camel}}
                * @return void
                */
                void set{{field_name_camel}}(uint8_t* data, size_t size);
{% endif %}
{% else %}
                /**
                * @brief Set {{field_name}}
                * @param {{field_type}} {{field_name_lower_camel}}
                * @return void
                */
                void set{{field_name_camel}}({{field_type}} {{field_name_lower_camel}});
{% endif %}
