{% if '[]' in field.type %}
{% if field.allowed_getters %}
{% for getter in field.allowed_getters %}
{% if getter == 'vector' %}
std::vector<uint8_t> {{class_name}}::get{{field.name_camel}}()
{
	return read(getFieldSize("{{field.name}}"), getFieldOffset("{{field.name}}"));
}
{% elseif getter == 'string' %}
std::string {{class_name}}::get{{field.name_camel}}()
{
	return readString({{field.size}}, getFieldOffset("{{field.name}}"));
}
{% endif %}
{% endfor %}
{% else %}
std::vector<uint8_t> {{class_name}}::get{{field.name_camel}}()
{
	return read(getFieldSize("{{field.name}}"), getFieldOffset("{{field.name}}"));
}
{% endif %}
{% elseif field.type == 'variable' %}
{% if field.allowed_getters %}
{% for getter in field.allowed_getters %}
{% if getter == 'vector' %}
std::vector<uint8_t> {{class_name}}::get{{field.name_camel}}()
{
	return readString(getFieldSize("{{field.name}}"), getFieldOffset("{{field.name}}"));
}
{% elseif getter == 'string' %}
std::string {{class_name}}::get{{field.name_camel}}()
{
	return read({{field.size}}, getFieldOffset("{{field.name}}"));
}
{% endif %}
{% endfor %}
{% else %}
std::vector<uint8_t> {{class_name}}::get{{field.name_camel}}()
{
	return readV(getFieldSize("{{field.name}}"), getFieldOffset("{{field.name}}"));
}
{% endif %}
{% else %}
{{field.type}} {{class_name}}::get{{field.name_camel}}()
{
    return read<{{field.type}}>(getFieldOffset("{{field.name}}"));
}
{% endif %}
